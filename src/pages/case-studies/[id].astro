---
import {
  ClientsAll,
  ProvidedServiceIdToIcon,
  type ClientPageProps,
} from '~/constants/clientsStack.astro';
import Layout from '../../layouts/Layout.astro';
import GeoAltImage from '~/assets/images/about/geo-alt.svg';
import PeopleImage from '~/assets/images/about/people.svg';
import RocketTakeoffImage from '~/assets/images/about/rocket-takeoff.svg';
import ChatLeftQuoteImage from '~/assets/images/about/chat-left-quote.svg';
import aboutBackgroundImage from '~/assets/images/about/about-bg.png';
import ShieldCheckImage from '~/assets/images/about/shield-check.svg';
import { Image } from 'astro:assets';
import ImageCarousel from '~/components/ImageCarousel.astro';
import ButtonLink from '~/components/ButtonLink.astro';
import type { ResponsiveImagesConfig } from '~/components/ResponsiveImage.astro';
import ResponsiveImage from '~/components/ResponsiveImage.astro';

export async function getStaticPaths() {
  return ClientsAll.filter((c) => c.id).map((client) => ({
    params: { id: client.id },
    props: { client },
  }));
}

interface Props {
  client: ClientPageProps;
}

const { client } = Astro.props;
const {
  name,
  title,
  subtitle,
  logoImg,
  description,
  comment,
  links,
  pageTopImg,
  about,
  providedServices,
  technologies,
  screenshotsInfo,
} = client;

const pageImagesConfig =
  pageTopImg &&
  ([
    pageTopImg.x2 && {
      image: pageTopImg.x2,
      sourceProps: {
        type: 'image/webp',
        media: '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx)',
      },
    },
    pageTopImg.x2 && {
      image: pageTopImg.x2,
      sourceProps: {
        media: '(min-device-pixel-ratio: 2)',
        type: 'image/webp',
      },
    },
    {
      image: pageTopImg.default,
      sourceProps: {
        media: '(max-device-pixel-ratio: 1)',
        type: 'image/webp',
      },
    },
  ].filter(Boolean) as ResponsiveImagesConfig);
---

<Layout>
  <div class="relative">
    <div
      class="container relative mb-4 mt-8 flex flex-col items-start justify-between md:mb-32 md:mt-24 md:flex-row"
    >
      <div class="relative z-10 mb-8 md:mb-0 md:w-[45%] lg:pt-[45px]">
        <Image
          format="webp"
          src={logoImg}
          width={logoImg.width}
          height={logoImg.height}
          alt={`${name} logo`}
        />
        <div class="md:text-4xl-desktop my-4 text-4xl text-white">
          {title ?? description}
        </div>
        <div
          class="text-xl !font-normal text-white opacity-80 md:text-xl-desktop"
        >
          {subtitle}
        </div>
        <div class="mt-8 flex flex-wrap gap-2 md:mt-10">
          {
            links?.map((link) => (
              <ButtonLink
                href={`https://${link}`}
                target="_blank"
                variant="outlined"
                arrowClasses="-rotate-45"
              >
                Visit {link}
              </ButtonLink>
            ))
          }
        </div>
      </div>
      {
        pageImagesConfig && (
          <div class="aspect-[1.14] w-full rounded-xl border border-white/[0.07] bg-white/[0.07] p-0.5 md:w-1/2 md:rounded-3xl md:p-4">
            <ResponsiveImage
              imagesConfig={pageImagesConfig}
              alt={`${name} image for top of the page`}
              format="webp"
              classes="w-full rounded-xl md:rounded-3xl"
              fetchPriority="high"
            />
          </div>
        )
      }
    </div>
    <Image
      format="webp"
      src={aboutBackgroundImage}
      class="absolute bottom-[-15%] left-0 z-[-1] h-[150%] w-screen"
      alt="About Us background"
    />
    <div class="container">
      <div class="relative mb-32 rounded-xl">
        <div class="overflow-hidden rounded-xl">
          <div class="flex flex-wrap gap-1 lg:flex-nowrap">
            <div
              class="flex grow basis-full flex-col gap-4 border border-white/[0.07] bg-white/5 p-6 md:p-8 lg:basis-1/3"
            >
              <div class="text-xl text-white md:text-xl-desktop">
                About {name}
              </div>
              <div
                class="flex items-center gap-2 text-xl !font-normal text-white md:text-xl-desktop"
              >
                <RocketTakeoffImage class="h-6 w-6 min-w-[24px]" />
                Founded in {about?.founded}
              </div>
              <div
                class="flex items-center gap-2 text-xl !font-normal text-white md:text-xl-desktop"
              >
                <PeopleImage class="h-6 w-6 min-w-[24px]" />
                {about?.employees} employees
              </div>
              <div
                class="flex items-center gap-2 text-xl !font-normal text-white md:text-xl-desktop"
              >
                <GeoAltImage class="h-6 w-6 min-w-[24px]" />
                {about?.location}
              </div>
              <div
                class="flex items-center gap-2 text-xl !font-normal text-white md:text-xl-desktop"
              >
                <ShieldCheckImage class="h-6 w-6 min-w-[24px]" />
                {about?.purpose}
              </div>
            </div>
            <div
              class="flex grow basis-full flex-col gap-4 border border-white/[0.07] bg-white/5 p-6 md:p-8 lg:basis-1/3"
            >
              <div class="text-xl text-white md:text-xl-desktop">
                Provided services
              </div>
              {
                providedServices?.map((service) => {
                  const Icon = ProvidedServiceIdToIcon[service.id];
                  return (
                    <div class="flex items-center gap-2 text-xl !font-normal text-white md:text-xl-desktop">
                      <Icon class="h-6 w-6 min-w-[24px]" />
                      {service.title}
                    </div>
                  );
                })
              }
            </div>
            {
              technologies && (
                <div class="flex grow basis-full flex-col gap-4 border border-white/[0.07] bg-white/5 p-4 md:p-8 lg:basis-1/3">
                  <div class="text-xl text-white md:text-xl-desktop">
                    Technology used
                  </div>

                  <div class="grid grid-cols-1 gap-x-0.5 gap-y-4 xs:grid-cols-2 lg:grid-cols-1 xl:grid-cols-2">
                    {technologies.map((technology) => {
                      const IconRendered = technology.object ? (
                        <Image
                          width={24}
                          height={24}
                          src={technology.object}
                          class="inline-block h-6 w-6 min-w-[1.5rem] object-contain"
                          alt={technology.title + ' logo'}
                        />
                      ) : (
                        <technology.SvgComponent class="inline-block h-6 w-6 min-w-[1.5rem]" />
                      );
                      return (
                        <div class="flex items-center gap-2 text-xl !font-normal text-white md:text-xl-desktop">
                          {IconRendered}
                          {technology.title}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )
            }
          </div>
          {
            comment && (
              <div class="mt-1 flex basis-full flex-col gap-4 border border-white/[0.07] bg-white/5 p-6 md:p-8 lg:basis-1/3">
                <ChatLeftQuoteImage />
                <div class="text-3xl !leading-[1.6] text-white md:text-3xl-desktop">
                  {comment.text}
                </div>
                <div class="mt-6 flex gap-4 md:mt-10">
                  {comment.author.avatar && (
                    <Image
                      src={comment.author.avatar}
                      width={comment.author.avatar.width}
                      height={comment.author.avatar.height}
                      alt={name + '`s chief photo'}
                      class="h-16 w-16 rounded-[50%]"
                      format="webp"
                    />
                  )}
                  <div class="flex flex-col justify-center">
                    <div class="text-xl text-white md:text-xl-desktop">
                      {comment.author.name}
                    </div>
                    <div class="text-lg text-white">
                      {comment.author.position}
                    </div>
                  </div>
                </div>
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
  {
    screenshotsInfo && (
      <ImageCarousel
        name={name}
        screenshotsInfo={screenshotsInfo}
        links={links}
      />
    )
  }
  {
    !screenshotsInfo && (
      <ButtonLink href="/case-studies" variant="ghost" classes="w-full">
        Visit more case studies
      </ButtonLink>
    )
  }
</Layout>
